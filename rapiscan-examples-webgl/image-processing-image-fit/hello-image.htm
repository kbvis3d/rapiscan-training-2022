<!DOCTYPE html>
<html>
<head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<link type="text/css" href="./hello-image_files/webgl-tutorials.css" rel="stylesheet">
<script type="text/javascript" src="./hello-image_files/webgl-utils.js"></script>
<script>
window.onload = main;

var fitSelection;

function main() {
  var image = new Image();
  image.src = "leaves.jpg";  // MUST BE SAME DOMAIN!!!
  image.onload = function() {
    render(image);
  }

  var options = ["fitimage", "fitwidth", "fitheight"];
  var initialSelection = "bestfit";

    // Setup UI to pick kernels.
  var ui = document.getElementById("ui");
  var select = document.createElement("select")
  for (var i = 0; i < options.length; i++) {
      var optionName = options[i];
      var option = document.createElement("option");
      option.value = optionName;
      if (optionName == initialSelection) {
          option.selected = true;
      }
      option.appendChild(document.createTextNode(optionName));
      select.appendChild(option);
  }
  select.onchange = function (event) {
      fitSelection = this.selectedIndex;
      render(image);
  };
  ui.appendChild(select);

}

function render(image) {
  // Get A WebGL context
  var canvas = document.getElementById("canvas");
  var gl = canvas.getContext("webgl2");
  if (!gl) {
    return;
  }

  gl.viewportWidth = canvas.width;
  gl.viewportHeight = canvas.height;

  // setup GLSL program
  vertexShader = createShaderFromScriptElement(gl, "2d-vertex-shader");
  fragmentShader = createShaderFromScriptElement(gl, "2d-fragment-shader");
  program = createProgram(gl, [vertexShader, fragmentShader]);
  gl.useProgram(program);

  // look up where the vertex data needs to go.
  var positionLocation = gl.getAttribLocation(program, "a_position");
  var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");

  // provide texture coordinates for the rectangle.
  var texCoordBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
  
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
      0.0,  0.0,
      1.0,  0.0,
      0.0,  1.0,
      0.0,  1.0,
      1.0,  0.0,
      1.0,  1.0]), gl.STATIC_DRAW);
  gl.enableVertexAttribArray(texCoordLocation);
  gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  // Create a texture.
  var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);

  // Set the parameters so we can render any size image.
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

  // Upload the image into the texture.
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

  // Create a buffer for the position of the rectangle corners.
  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.enableVertexAttribArray(positionLocation);
  gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

  // create the image rectangle (2 triangles)
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0,
                                                   1.0, -1.0,
                                                   -1.0, 1.0,
                                                   -1.0, 1.0,
                                                   1.0, -1.0,
                                                   1.0, 1.0]), gl.STATIC_DRAW);

  var imageAspectRatio = image.width / image.height;
  var canvasAspectRatio = canvas.width / canvas.height;
  var texScaleU = 1.0;
  var texScaleV = 1.0;

  if (fitSelection == 1) { // fit width
      if (imageAspectRatio < 1.0) {
          texScaleV = imageAspectRatio;
          imageAspectRatio = 1.0;
          canvasAspectRatio = 1.0;
      }
  }
  else if (fitSelection == 2) { // fit height
      if (imageAspectRatio > 1.0) {
          texScaleU = canvasAspectRatio * 1.0 / imageAspectRatio;
          imageAspectRatio = 1.0;
          canvasAspectRatio = 1.0;
      }
  }

  var texScaleULocation = gl.getUniformLocation(program, "texScaleU");
  gl.uniform1f(texScaleULocation, texScaleU);
  var texScaleVLocation = gl.getUniformLocation(program, "texScaleV");
  gl.uniform1f(texScaleVLocation, texScaleV);
  var aspectRatioLocation = gl.getUniformLocation(program, "aspectRatio");
  gl.uniform1f(aspectRatioLocation, imageAspectRatio / canvasAspectRatio);

  // Draw the rectangle.
  gl.drawArrays(gl.TRIANGLES, 0, 6);
}

</script>
<!-- vertex shader -->
<script id="2d-vertex-shader" type="x-shader/x-vertex">#version 300 es // has to be on first line - do not add newline
    uniform float aspectRatio;
    uniform float texScaleU;
    uniform float texScaleV;

    in vec2 a_position;
    in vec2 a_texCoord;

    out vec2 v_texCoord;

    void main() {
        vec2 scaleFit = aspectRatio > 1.0 ? vec2(1, 1.0/aspectRatio) : vec2(aspectRatio, 1.0);
        gl_Position = vec4(a_position * vec2(1, -1) * scaleFit, 0, 1);

        // pass the texCoord to the fragment shader
        // The GPU will interpolate this value between points.
        v_texCoord = a_texCoord * vec2(texScaleU, texScaleV);
    }
</script>

<!-- fragment shader -->
<script id="2d-fragment-shader" type="x-shader/x-fragment">#version 300 es // has to be on first line - do not add newline
    precision mediump float;

    // our texture
    uniform sampler2D u_image;

    // the texCoords passed in from the vertex shader.
    in vec2 v_texCoord;

    out vec4 fragColor;

    void main() {
        fragColor = texture(u_image, v_texCoord);
    }
</script>
</head>

<body>
<h1>WebGL - 2D Image</h1><canvas id="canvas" width="800" height="512"></canvas>
    <div id="uiContainer">
  <div id="ui"></div>
</div>
</body></html>