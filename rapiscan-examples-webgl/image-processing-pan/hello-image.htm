<!DOCTYPE html>
<html>
<head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<link type="text/css" href="./hello-image_files/webgl-tutorials.css" rel="stylesheet">
<script type="text/javascript" src="./hello-image_files/webgl-utils.js"></script>
<script>
window.onload = main;

var canvas;
var gl;
var image;
var texCoords = new Float32Array([
                                  0.0,  0.0,
                                  1.0,  0.0,
                                  0.0,  1.0,
                                  0.0,  1.0,
                                  1.0,  0.0,
                                  1.0,  1.0]);
                                  
function main() {
	  // Get A WebGL context
	  canvas = document.getElementById("canvas"); 
	  canvas.onmousedown = handleMouseDown;
	  document.onmouseup = handleMouseUp;
	  document.onmousemove = handleMouseMove;
	  
      gl = canvas.getContext("webgl2");
	  if (!gl) {
	    return;
	  }
	
  image = new Image();
  image.src = "leaves.jpg";  // MUST BE SAME DOMAIN!!!
  image.onload = function() {
    render(image);
  }
}

function render(image) {
  // setup GLSL program
  vertexShader = createShaderFromScriptElement(gl, "2d-vertex-shader");
  fragmentShader = createShaderFromScriptElement(gl, "2d-fragment-shader");
  program = createProgram(gl, [vertexShader, fragmentShader]);
  gl.useProgram(program);

  // look up where the vertex data needs to go.
  var positionLocation = gl.getAttribLocation(program, "a_position");
  var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");

  // provide texture coordinates for the rectangle.
  var texCoordBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);
  gl.enableVertexAttribArray(texCoordLocation);
  gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);

  // Create a texture.
  var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);

  // Set the parameters so we can render any size image.
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

  // Upload the image into the texture.
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

  // Create a buffer for the position of the rectangle corners.
  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.enableVertexAttribArray(positionLocation);
  gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

  // create the image rectangle (2 triangles)
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0,
                                                   1.0, -1.0,
                                                   -1.0, 1.0,
                                                   -1.0, 1.0,
                                                   1.0, -1.0,
                                                   1.0, 1.0]), gl.STATIC_DRAW);

  // Draw the rectangle.
  gl.drawArrays(gl.TRIANGLES, 0, 6);
}

var mouseDown = false;
var lastMouseX = null;
var lastMouseY = null;
var lastMouseDownX = null;
var lastMouseDownY = null;

function handleMouseDown(event) {
    mouseDown = true;
    var rect = canvas.getBoundingClientRect();
    lastMouseX = lastMouseDownX = event.clientX - rect.left;
    lastMouseY = lastMouseDownY = event.clientY - rect.top;
}


function handleMouseUp(event) {
    mouseDown = false;
}


function handleMouseMove(event) {
    if (!mouseDown) {
        return;
    }
    var rect = canvas.getBoundingClientRect();
    var newX = event.clientX - rect.left;
	var newY = event.clientY - rect.top;
    var deltaX = newX - lastMouseX;
	var deltaY = newY - lastMouseY;
    var oldextent = texCoords[2] - texCoords[0];
    var extent = (1.0 - deltaX/canvas.width)*(texCoords[2] - texCoords[0]);

    if(1)
    {
		// translate the image
		var offsetX = deltaX/canvas.width;
		var offsetY = deltaY/canvas.height;

		for(i=0;i<6;i++)
		{
			texCoords[2*i+0] -= offsetX;
			texCoords[2*i+1] -= offsetY;
		}
	}

    lastMouseX = event.clientX - rect.left;
    lastMouseY = event.clientY - rect.top;
    
    render(image);
}

</script>
<!-- vertex shader -->
<script id="2d-vertex-shader" type="x-shader/x-vertex">#version 300 es // has to be on first line - do not add newline
    in vec2 a_position;
    in vec2 a_texCoord;

    out vec2 v_texCoord;

    void main() {
        gl_Position = vec4(a_position * vec2(1, -1), 0, 1);

        // pass the texCoord to the fragment shader
        // The GPU will interpolate this value between points.
        v_texCoord = a_texCoord;
    }
</script>

<!-- fragment shader -->
<script id="2d-fragment-shader" type="x-shader/x-fragment">#version 300 es // has to be on first line - do not add newline
    precision mediump float;

    // our texture
    uniform sampler2D u_image;

    // the texCoords passed in from the vertex shader.
    in vec2 v_texCoord;

    out vec4 fragColor;

    void main() {
        fragColor = texture(u_image, v_texCoord);
    }
</script>
</head>

<body>
<h1>WebGL - Pan</h1><canvas id="canvas" width="500" height="500"></canvas>
</body></html>