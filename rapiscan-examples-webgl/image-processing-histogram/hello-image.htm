<!DOCTYPE html>
<html>
<head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<link type="text/css" href="./hello-image_files/webgl-tutorials.css" rel="stylesheet">
<script type="text/javascript" src="./hello-image_files/webgl-utils.js"></script>
<script>
window.onload = main;

var vertexShaderSource = `#version 300 es
precision mediump float;

uniform float aspectRatio;
in vec2 a_position;
in vec2 a_texCoord;

out vec2 v_texCoord;

void main() {
   vec2 scaleFit = aspectRatio > 1.0 ? vec2(1, 1.0/aspectRatio) : vec2(aspectRatio, 1.0);
   gl_Position = vec4(a_position * vec2(1, -1) * scaleFit, 0, 1);

   // pass the texCoord to the fragment shader
   // The GPU will interpolate this value between points.
   v_texCoord = a_texCoord;
}
`;

var fragmentShaderSource = `#version 300 es
precision mediump float;

// our texture
uniform sampler2D u_image;
uniform sampler2D u_image2;
uniform float bin;

// the texCoords passed in from the vertex shader.
in vec2 v_texCoord;

out vec4 color;

void main() {
    color = texture(u_image, v_texCoord);
    int luminance = int(length(color.rgb) * 255.0);
    if(bin > 0.0 && luminance != int(bin)) discard;
}
`;

function main() {
  var image = new Image();
  image.src = "leaves.jpg";  // MUST BE SAME DOMAIN!!!
  image.onload = function() {
    render(image);
  }
}

function render(image) {
  // Get A WebGL context
    var canvas = document.getElementById("canvas");
    var gl = canvas.getContext("webgl2");
  //var gl = getWebGLContext(canvas);
  if (!gl) {
    return;
  }

  gl.viewportWidth = canvas.width;
  gl.viewportHeight = canvas.height;

  // setup GLSL program
  //vertexShader = createShaderFromScriptElement(gl, "2d-vertex-shader");
  //fragmentShader = createShaderFromScriptElement(gl, "2d-fragment-shader");
    //program = createProgram(gl, [vertexShader, fragmentShader]);

  var program = webglUtils.createProgramFromSources(gl,
       [vertexShaderSource, fragmentShaderSource]);

  gl.useProgram(program);

  // look up where the vertex data needs to go.
  var positionLocation = gl.getAttribLocation(program, "a_position");
  var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");

  // provide texture coordinates for the rectangle.
  var texCoordBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
  
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
      0.0,  0.0,
      1.0,  0.0,
      0.0,  1.0,
      0.0,  1.0,
      1.0,  0.0,
      1.0,  1.0]), gl.STATIC_DRAW);
  gl.enableVertexAttribArray(texCoordLocation);
  gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  // Create a texture.
  var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);

  // Set the parameters so we can render any size image.
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

  // Upload the image into the texture.
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

  // Create a buffer for the position of the rectangle corners.
  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.enableVertexAttribArray(positionLocation);
  gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

  // create the image rectangle (2 triangles)
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0,
                                                   1.0, -1.0,
                                                   -1.0, 1.0,
                                                   -1.0, 1.0,
                                                   1.0, -1.0,
                                                   1.0, 1.0]), gl.STATIC_DRAW);

  var aspectRatioLocation = gl.getUniformLocation(program, "aspectRatio");
  gl.uniform1f(aspectRatioLocation, image.width/image.height);

  // collect the histogram data
  var binLocation = gl.getUniformLocation(program, "bin");
  var query = gl.createQuery();
  var histogram = [];

  for (bin = 0; bin < 256; bin++) {
      gl.beginQuery(gl.SAMPLES_PASSED, query);
      gl.uniform1f(binLocation, bin);
      gl.drawArrays(gl.TRIANGLES, 0, 6);
      gl.endQuery(gl.SAMPLES_PASSED);

      result = gl.getQueryParameter(query, gl.QUERY_RESULT);
      console.log(Number(result));
      histogram.push(result);
  }  
  gl.deleteQuery(query);

    // Draw the image with the histogram overlaid
  gl.uniform1f(binLocation, -1); // disable bin check
  gl.drawArrays(gl.TRIANGLES, 0, 6);

  // display histogram either as lines or texture using values from above
}

</script>
<!-- vertex shader -->
<script id="2d-vertex-shader" type="x-shader/x-vertex">
#version 300 es
precision mediump float;

uniform float aspectRatio;
attribute vec2 a_position;
attribute vec2 a_texCoord;

varying vec2 v_texCoord;

void main() {
   vec2 scaleFit = aspectRatio > 1.0 ? vec2(1, 1.0/aspectRatio) : vec2(aspectRatio, 1.0);
   gl_Position = vec4(a_position * vec2(1, -1) * scaleFit, 0, 1);

   // pass the texCoord to the fragment shader
   // The GPU will interpolate this value between points.
   v_texCoord = a_texCoord;
}
</script>

<!-- fragment shader -->
<script id="2d-fragment-shader" type="x-shader/x-fragment">
#version 300 es
precision mediump float;

// our texture
uniform sampler2D u_image;
uniform sampler2D u_image2;
uniform float bin;

// the texCoords passed in from the vertex shader.
varying vec2 v_texCoord;

void main() {
    vec4 color = texture2D(u_image, v_texCoord);
    int luminance = int(length(color.rgb) * 255.0);
    if(bin > 0 && luminance != int(bin)) discard;

    gl_FragColor = color;
}
</script>
</head>

<body>
<h1>WebGL - 2D Image</h1><canvas id="canvas" width="500" height="500"></canvas>
</body></html>