<!DOCTYPE html>
<html>
<head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<link type="text/css" href="./hello-image_files/webgl-tutorials.css" rel="stylesheet">
<script type="text/javascript" src="./hello-image_files/webgl-utils.js"></script>
<script>
window.onload = main;

var canvas;
var gl;
var image;
var fitSelection;
var texCoords = new Float32Array([
                                  0.0, 0.0,
                                  1.0, 0.0,
                                  0.0, 1.0,
                                  0.0, 1.0,
                                  1.0, 0.0,
                                  1.0, 1.0]);

function main() {
    // Get A WebGL context
    canvas = document.getElementById("canvas");
    gl = canvas.getContext("webgl2");
    if (!gl) {
        return;
    }
    canvas.onmousedown = handleMouseDown;
    document.onmouseup = handleMouseUp;
    document.onmousemove = handleMouseMove;

    image = new Image();
    image.src = "leaves.jpg";  // MUST BE SAME DOMAIN!!!
    image.onload = function () {
        render(image);
    }

    var options = ["fitimage", "fitwidth", "fitheight"];
    var initialSelection = "bestfit";

    // Setup UI to pick kernels.
    var ui = document.getElementById("ui");
    var select = document.createElement("select")
    for (var i = 0; i < options.length; i++) {
        var optionName = options[i];
        var option = document.createElement("option");
        option.value = optionName;
        if (optionName == initialSelection) {
            option.selected = true;
        }
        option.appendChild(document.createTextNode(optionName));
        select.appendChild(option);
    }
    select.onchange = function (event) {
        fitSelection = this.selectedIndex;
        render(image);
    };
    ui.appendChild(select);

}

function render(image, um, vm) {

    gl.viewportWidth = canvas.width;
    gl.viewportHeight = canvas.height;

    // setup GLSL program
    vertexShader = createShaderFromScriptElement(gl, "2d-vertex-shader");
    fragmentShader = createShaderFromScriptElement(gl, "2d-fragment-shader");
    program = createProgram(gl, [vertexShader, fragmentShader]);
    gl.useProgram(program);

    // look up where the vertex data needs to go.
    var positionLocation = gl.getAttribLocation(program, "a_position");
    var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");

    // provide texture coordinates for the rectangle.
    var texCoordBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);

    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
        0.0, 0.0,
        1.0, 0.0,
        0.0, 1.0,
        0.0, 1.0,
        1.0, 0.0,
        1.0, 1.0]), gl.STATIC_DRAW);
    gl.enableVertexAttribArray(texCoordLocation);
    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);

    // Create a texture.
    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);

    // Set the parameters so we can render any size image.
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

    // Upload the image into the texture.
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

    // Create a buffer for the position of the rectangle corners.
    var buffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

    // create the image rectangle (2 triangles)
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0,
                                                     1.0, -1.0,
                                                     -1.0, 1.0,
                                                     -1.0, 1.0,
                                                     1.0, -1.0,
                                                     1.0, 1.0]), gl.STATIC_DRAW);

    var imageAspectRatio = image.width / image.height;
    var canvasAspectRatio = canvas.width / canvas.height;
    var texScaleU = 1.0;
    var texScaleV = 1.0;

    if (fitSelection == 1) { // fit width
        if (imageAspectRatio < 1.0) {
            texScaleV = imageAspectRatio;
            imageAspectRatio = 1.0;
            canvasAspectRatio = 1.0;
        }
    }
    else if (fitSelection == 2) { // fit height
        if (imageAspectRatio > 1.0) {
            texScaleU = canvasAspectRatio * 1.0 / imageAspectRatio;
            imageAspectRatio = 1.0;
            canvasAspectRatio = 1.0;
        }
    }

    var texScaleLocation = gl.getUniformLocation(program, "texScale");
    gl.uniform2f(texScaleLocation, texScaleU, texScaleV);
    var ratio = imageAspectRatio / canvasAspectRatio;
    var aspectRatio = ratio > 1.0 ? [1.0, 1.0 / ratio] : [ratio, 1.0];
    var aspectRatioLocation = gl.getUniformLocation(program, "aspectRatio");
    gl.uniform2f(aspectRatioLocation, aspectRatio[0], aspectRatio[1]);
    var texRatioLocation = gl.getUniformLocation(program, "texRatio");
    gl.uniform1f(texRatioLocation, imageAspectRatio);

    var mousePosLocation = gl.getUniformLocation(program, "u_mousePos");
    gl.uniform2f(mousePosLocation, um, vm);
    var lensRadiusLocation = gl.getUniformLocation(program, "u_lensRadius");
    gl.uniform1f(lensRadiusLocation, 0.25);
    var lensScaleLocation = gl.getUniformLocation(program, "u_lensScale");
    gl.uniform1f(lensScaleLocation, 0.5);

    // Draw the rectangle.
    gl.drawArrays(gl.TRIANGLES, 0, 6);
}

var mouseDown = false;
var lastMouseX = null;
var lastMouseY = null;
var lastMouseDownX = null;
var lastMouseDownY = null;

function handleMouseDown(event) {
    mouseDown = true;
    var rect = canvas.getBoundingClientRect();
    lastMouseX = lastMouseDownX = event.clientX - rect.left;
    lastMouseY = lastMouseDownY = event.clientY - rect.top;
}


function handleMouseUp(event) {
    mouseDown = false;
    render(image, -1, -1);
}


function handleMouseMove(event) {
    if (mouseDown) {
        var tx = lastMouseX / canvas.width;
        var ty = lastMouseY / canvas.height;
        // get texture coordinate of mouse-down point 
        var um = tx * texCoords[2] + (1.0 - tx) * texCoords[0];
        var vm = ty * texCoords[5] + (1.0 - ty) * texCoords[1];
        render(image, um, vm);
    }
    var rect = canvas.getBoundingClientRect();
    lastMouseX = event.clientX - rect.left;
    lastMouseY = event.clientY - rect.top;
}

</script>
<!-- vertex shader -->
<script id="2d-vertex-shader" type="x-shader/x-vertex">#version 300 es // has to be on first line - do not add newline
    precision mediump float;

    uniform vec2 aspectRatio;
    uniform vec2 texScale;
    in vec2 a_position;
    in vec2 a_texCoord;

    out vec2 v_texCoord;

    void main() {
        gl_Position = vec4(a_position * vec2(1, -1) * aspectRatio, 0, 1);

        // pass the texCoord to the fragment shader
        // The GPU will interpolate this value between points.
        v_texCoord = a_texCoord * texScale;
    }
</script>

<!-- fragment shader -->
<script id="2d-fragment-shader" type="x-shader/x-fragment">#version 300 es // has to be on first line - do not add newline
    precision mediump float;

    // our texture
    uniform sampler2D u_image;
    // user mouse-pos in texture space
    uniform vec2 u_mousePos;
    // magic lens settings
    uniform float u_lensRadius;
    uniform float u_lensScale;
    uniform float texRatio;

    // the texCoords passed in from the vertex shader.
    in vec2 v_texCoord;

    out vec4 fragColor;

    void main() {
        vec2 newTexCoord;
        vec2 offset = (v_texCoord - u_mousePos) * vec2(texRatio, 1);
        float distance = length(offset);
        if(distance < u_lensRadius)
        {
            // apply zoom factor
            newTexCoord.x = u_mousePos.x + u_lensScale * (v_texCoord.x - u_mousePos.x);
            newTexCoord.y = u_mousePos.y + u_lensScale * (v_texCoord.y - u_mousePos.y);
        }
        else
        {
            newTexCoord.x = v_texCoord.x;
            newTexCoord.y = v_texCoord.y;
        }

        fragColor = texture(u_image, newTexCoord);
    }
</script>
</head>

<body>
<h1>WebGL - 2D Image</h1><canvas id="canvas" width="900" height="500"></canvas>
    <div id="uiContainer">
  <div id="ui"></div>
</div>
</body></html>