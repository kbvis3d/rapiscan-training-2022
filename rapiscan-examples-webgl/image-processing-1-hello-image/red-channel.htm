<!DOCTYPE html>
<!-- saved from url=(0144)file:///C:/Users/karthikb/Documents/Documents/Personal-Old/Training/Rapiscan/kbvis-examples-webgl/image-processing-1-hello-image/hello-image.htm -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link type="text/css" href="./red-channel_files/webgl-tutorials.css" rel="stylesheet">
<script type="text/javascript" src="./red-channel_files/webgl-utils.js.download"></script>
<script>
window.onload = main;

function main() {
  var image = new Image();
  image.src = "leaves-512x512.jpg";  // MUST BE SAME DOMAIN!!!
  image.onload = function() {
    render(image);
  }
}

function render(image) {
  // Get A WebGL context
  var canvas = document.getElementById("canvas");
  var gl = getWebGLContext(canvas);
  if (!gl) {
    return;
  }

  gl.viewportWidth = canvas.width;
  gl.viewportHeight = canvas.height;

  // setup GLSL program
  vertexShader = createShaderFromScriptElement(gl, "2d-vertex-shader");
  fragmentShader = createShaderFromScriptElement(gl, "2d-fragment-shader");
  program = createProgram(gl, [vertexShader, fragmentShader]);
  gl.useProgram(program);

  // look up where the vertex data needs to go.
  var positionLocation = gl.getAttribLocation(program, "a_position");
  var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");

  // provide texture coordinates for the rectangle.
  var texCoordBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
  
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
      0.0,  0.0,
      1.0,  0.0,
      0.0,  1.0,
      0.0,  1.0,
      1.0,  0.0,
      1.0,  1.0]), gl.STATIC_DRAW);
  gl.enableVertexAttribArray(texCoordLocation);
  gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  // Create a texture.
  var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);

  // Set the parameters so we can render any size image.
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

  // Upload the image into the texture.
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

  // Create a buffer for the position of the rectangle corners.
  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.enableVertexAttribArray(positionLocation);
  gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

  // create the image rectangle (2 triangles)
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0,
                                                   1.0, -1.0,
                                                   -1.0, 1.0,
                                                   -1.0, 1.0,
                                                   1.0, -1.0,
                                                   1.0, 1.0]), gl.STATIC_DRAW);

  var aspectRatioLocation = gl.getUniformLocation(program, "aspectRatio");
  gl.uniform1f(aspectRatioLocation, (image.width / image.height) * (canvas.height/canvas.width));

  // Draw the rectangle.
  gl.drawArrays(gl.TRIANGLES, 0, 6);
}

</script>
<!-- vertex shader -->
<script id="2d-vertex-shader" type="x-shader/x-vertex">
uniform float aspectRatio;
attribute vec2 a_position;
attribute vec2 a_texCoord;

varying vec2 v_texCoord;

void main() {
   vec2 scaleFit = aspectRatio > 1.0 ? vec2(1, 1.0/aspectRatio) : vec2(aspectRatio, 1.0);
   gl_Position = vec4(a_position * vec2(1, -1) * scaleFit, 0, 1);

   // pass the texCoord to the fragment shader
   // The GPU will interpolate this value between points.
   v_texCoord = a_texCoord;
}
</script>

<!-- fragment shader -->
<script id="2d-fragment-shader" type="x-shader/x-fragment">
precision mediump float;

// our texture
uniform sampler2D u_image;
uniform sampler2D u_image2;

// the texCoords passed in from the vertex shader.
varying vec2 v_texCoord;

void main() {
   gl_FragColor = vec4(texture2D(u_image, v_texCoord).r,0.0,0.0,1.0);
}
</script>
</head>

<body>
<h1></h1><h1>Image with Red Channel Only</h1><canvas id="canvas" width="500" height="500"></canvas>
</body></html>